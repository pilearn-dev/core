class message:

    def __init__(self, id):
        self.id = id
        self.__data = self.getInfo()

    def getName(self):
        return self.getDetail("name")

    def getDescription(self):
        return self.getDetail("description")

    def isFrozen(self):
        return bool(self.getDetail("frozen"))

    def getDetail(self, d):
        return self.__data[d]

    def setDetail(self, d, v):
        if self.id == -3: return
        try:
            con = lite.connect('chat.db')
            con.row_factory = lite.Row
            cur = con.cursor()
            cur.execute("UPDATE messages SET "+d+"=? WHERE id=?", (v, self.id))
            con.commit()
            return True
        except lite.Error as e:
            return False
        finally:
            if con:
                con.close()

    def getInfo(self):
        try:
            con = lite.connect('chat.db')
            con.row_factory = lite.Row
            cur = con.cursor()
            cur.execute("SELECT * FROM messages WHERE id=?", (self.id, ))
            data = cur.fetchone()
            if data is None:
                return
            return {
                "id": data["id"],
                "name": data["name"],
                "description": data["description"],
                "frozen": data["frozen"],
                "suspended": data["suspended"],
                "suspension_end": data["suspension_end"],
                "public_read": data["public_read"],
                "public_write": data["public_write"]
            }
        except lite.Error as e:
            #raise lite.Error from e
            raise e
        finally:
            if con:
                con.close()

    def isLoggedIn(self):
        return self.id != -3

    @classmethod
    def exists(cls, id):
        try:
            con = lite.connect('chat.db')
            con.row_factory = lite.Row
            cur = con.cursor()
            cur.execute("SELECT * FROM messages WHERE id=?", (id,))
            data = cur.fetchone()
            return data is not None
        except lite.Error as e:
            return False
        finally:
            if con:
                con.close()

    @classmethod
    def all(cls):
        try:
            con = lite.connect('chat.db')
            con.row_factory = lite.Row
            cur = con.cursor()
            cur.execute("SELECT * FROM messages")
            data = cur.fetchall()
            data = [message(i["id"]) for i in data]
            return data
        except lite.Error as e:
            return []
        finally:
            if con:
                con.close()